import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score
credit_card_data = pd.read_csv('/content/creditcard.csv')


# first five row of dataset
credit_card_data.head()

#last five rows of dataset
credit_card_data.tail()

#dataset information
credit_card_data.info()

# checkinh number of missing value in each column
credit_card_data.isnull().sum()

#distribution of legit transaction and fradulent transcation
credit_card_data['Class'].value_counts()


This dataset is highly unbalanced

0---> Normal Transaction
1---> Fradulent Transaction

# seperating the data for analysis
legit = credit_card_data[credit_card_data.Class==0.0]
fradulent= credit_card_data[credit_card_data.Class==1.0]

print(legit.shape)
print(fradulent.shape)

# statistical measure of the data
legit.Amount.describe()

fradulent.Amount.describe()

# compare value for both transaction
credit_card_data.groupby('Class').mean()

Under-Sampling

Build a sample dataset containing similar distribution of Normal Transaction and Fradulent TransactionS

Number of Fradulent Transactions---> 428

legit_sample=legit.sample(n=428)
new_dataset.head()
new_dataset.tail()
new_dataset['Class'].value_counts()
new_dataset.groupby('Class').mean()


Splitting data into Feature & Target
X=new_dataset.drop(columns='Class',axis=1)
Y=new_dataset['Class']
print(X)
print(Y)


Split the data into training data and Testing data

X_train,X_test,Y_train,Y_test =  train_test_split(X,Y,test_size=0.2,stratify=Y,random_state=2)
print(X.shape,X_train.shape,X_test.shape)

Model Training

Logistic Regression

model = LogisticRegression()
#training the logistic regression model with training data
model.fit(X_train, Y_train)

Model Evalution

Accuracy Score
# accuracy son trainkg data
X_train_prediction=model.predict(X_train)
training_data_accuracy= accuracy_score(X_train_prediction,Y_train)
print('Accuracy on training data:', training_data_accuracy)
# accuracy on test data
X_test_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction,Y_test)

print('Accuracy on test data:', test_data_accuracy)
